// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: videomux.proto

package videomux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoMuxClient is the client API for VideoMux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoMuxClient interface {
	SendVideo(ctx context.Context, opts ...grpc.CallOption) (VideoMux_SendVideoClient, error)
}

type videoMuxClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoMuxClient(cc grpc.ClientConnInterface) VideoMuxClient {
	return &videoMuxClient{cc}
}

func (c *videoMuxClient) SendVideo(ctx context.Context, opts ...grpc.CallOption) (VideoMux_SendVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoMux_ServiceDesc.Streams[0], "/videomux.VideoMux/SendVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoMuxSendVideoClient{stream}
	return x, nil
}

type VideoMux_SendVideoClient interface {
	Send(*VideoRequest) error
	CloseAndRecv() (*VideoResponse, error)
	grpc.ClientStream
}

type videoMuxSendVideoClient struct {
	grpc.ClientStream
}

func (x *videoMuxSendVideoClient) Send(m *VideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoMuxSendVideoClient) CloseAndRecv() (*VideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoMuxServer is the server API for VideoMux service.
// All implementations must embed UnimplementedVideoMuxServer
// for forward compatibility
type VideoMuxServer interface {
	SendVideo(VideoMux_SendVideoServer) error
	mustEmbedUnimplementedVideoMuxServer()
}

// UnimplementedVideoMuxServer must be embedded to have forward compatible implementations.
type UnimplementedVideoMuxServer struct {
}

func (UnimplementedVideoMuxServer) SendVideo(VideoMux_SendVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method SendVideo not implemented")
}
func (UnimplementedVideoMuxServer) mustEmbedUnimplementedVideoMuxServer() {}

// UnsafeVideoMuxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoMuxServer will
// result in compilation errors.
type UnsafeVideoMuxServer interface {
	mustEmbedUnimplementedVideoMuxServer()
}

func RegisterVideoMuxServer(s grpc.ServiceRegistrar, srv VideoMuxServer) {
	s.RegisterService(&VideoMux_ServiceDesc, srv)
}

func _VideoMux_SendVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoMuxServer).SendVideo(&videoMuxSendVideoServer{stream})
}

type VideoMux_SendVideoServer interface {
	SendAndClose(*VideoResponse) error
	Recv() (*VideoRequest, error)
	grpc.ServerStream
}

type videoMuxSendVideoServer struct {
	grpc.ServerStream
}

func (x *videoMuxSendVideoServer) SendAndClose(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoMuxSendVideoServer) Recv() (*VideoRequest, error) {
	m := new(VideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoMux_ServiceDesc is the grpc.ServiceDesc for VideoMux service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoMux_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videomux.VideoMux",
	HandlerType: (*VideoMuxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendVideo",
			Handler:       _VideoMux_SendVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "videomux.proto",
}
