// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: videomux.proto

package generated_videomux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoMuxClient is the client API for VideoMux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoMuxClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	SendVideo(ctx context.Context, opts ...grpc.CallOption) (VideoMux_SendVideoClient, error)
	ReceiveVideo(ctx context.Context, in *ReceiveVideoRequest, opts ...grpc.CallOption) (VideoMux_ReceiveVideoClient, error)
	ListVideos(ctx context.Context, in *ListVideoRequest, opts ...grpc.CallOption) (*ListVideoResponse, error)
	ConvertVideo(ctx context.Context, in *ConvertVideoRequest, opts ...grpc.CallOption) (*ConvertVideoResponse, error)
	RenameVideo(ctx context.Context, in *RenameVideoRequest, opts ...grpc.CallOption) (*RenameVideoResponse, error)
	GetVideoProperties(ctx context.Context, in *GetVideoPropertiesRequest, opts ...grpc.CallOption) (*GetVideoPropertiesResponse, error)
}

type videoMuxClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoMuxClient(cc grpc.ClientConnInterface) VideoMuxClient {
	return &videoMuxClient{cc}
}

func (c *videoMuxClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) SendVideo(ctx context.Context, opts ...grpc.CallOption) (VideoMux_SendVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoMux_ServiceDesc.Streams[0], "/videomux.VideoMux/SendVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoMuxSendVideoClient{stream}
	return x, nil
}

type VideoMux_SendVideoClient interface {
	Send(*SendVideoRequest) error
	CloseAndRecv() (*SendVideoResponse, error)
	grpc.ClientStream
}

type videoMuxSendVideoClient struct {
	grpc.ClientStream
}

func (x *videoMuxSendVideoClient) Send(m *SendVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoMuxSendVideoClient) CloseAndRecv() (*SendVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoMuxClient) ReceiveVideo(ctx context.Context, in *ReceiveVideoRequest, opts ...grpc.CallOption) (VideoMux_ReceiveVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoMux_ServiceDesc.Streams[1], "/videomux.VideoMux/ReceiveVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoMuxReceiveVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoMux_ReceiveVideoClient interface {
	Recv() (*ReceiveVideoResponse, error)
	grpc.ClientStream
}

type videoMuxReceiveVideoClient struct {
	grpc.ClientStream
}

func (x *videoMuxReceiveVideoClient) Recv() (*ReceiveVideoResponse, error) {
	m := new(ReceiveVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoMuxClient) ListVideos(ctx context.Context, in *ListVideoRequest, opts ...grpc.CallOption) (*ListVideoResponse, error) {
	out := new(ListVideoResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/ListVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) ConvertVideo(ctx context.Context, in *ConvertVideoRequest, opts ...grpc.CallOption) (*ConvertVideoResponse, error) {
	out := new(ConvertVideoResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/ConvertVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) RenameVideo(ctx context.Context, in *RenameVideoRequest, opts ...grpc.CallOption) (*RenameVideoResponse, error) {
	out := new(RenameVideoResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/RenameVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoMuxClient) GetVideoProperties(ctx context.Context, in *GetVideoPropertiesRequest, opts ...grpc.CallOption) (*GetVideoPropertiesResponse, error) {
	out := new(GetVideoPropertiesResponse)
	err := c.cc.Invoke(ctx, "/videomux.VideoMux/GetVideoProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoMuxServer is the server API for VideoMux service.
// All implementations must embed UnimplementedVideoMuxServer
// for forward compatibility
type VideoMuxServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	SendVideo(VideoMux_SendVideoServer) error
	ReceiveVideo(*ReceiveVideoRequest, VideoMux_ReceiveVideoServer) error
	ListVideos(context.Context, *ListVideoRequest) (*ListVideoResponse, error)
	ConvertVideo(context.Context, *ConvertVideoRequest) (*ConvertVideoResponse, error)
	RenameVideo(context.Context, *RenameVideoRequest) (*RenameVideoResponse, error)
	GetVideoProperties(context.Context, *GetVideoPropertiesRequest) (*GetVideoPropertiesResponse, error)
	mustEmbedUnimplementedVideoMuxServer()
}

// UnimplementedVideoMuxServer must be embedded to have forward compatible implementations.
type UnimplementedVideoMuxServer struct {
}

func (UnimplementedVideoMuxServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedVideoMuxServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedVideoMuxServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedVideoMuxServer) SendVideo(VideoMux_SendVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method SendVideo not implemented")
}
func (UnimplementedVideoMuxServer) ReceiveVideo(*ReceiveVideoRequest, VideoMux_ReceiveVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveVideo not implemented")
}
func (UnimplementedVideoMuxServer) ListVideos(context.Context, *ListVideoRequest) (*ListVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedVideoMuxServer) ConvertVideo(context.Context, *ConvertVideoRequest) (*ConvertVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertVideo not implemented")
}
func (UnimplementedVideoMuxServer) RenameVideo(context.Context, *RenameVideoRequest) (*RenameVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameVideo not implemented")
}
func (UnimplementedVideoMuxServer) GetVideoProperties(context.Context, *GetVideoPropertiesRequest) (*GetVideoPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoProperties not implemented")
}
func (UnimplementedVideoMuxServer) mustEmbedUnimplementedVideoMuxServer() {}

// UnsafeVideoMuxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoMuxServer will
// result in compilation errors.
type UnsafeVideoMuxServer interface {
	mustEmbedUnimplementedVideoMuxServer()
}

func RegisterVideoMuxServer(s grpc.ServiceRegistrar, srv VideoMuxServer) {
	s.RegisterService(&VideoMux_ServiceDesc, srv)
}

func _VideoMux_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_SendVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoMuxServer).SendVideo(&videoMuxSendVideoServer{stream})
}

type VideoMux_SendVideoServer interface {
	SendAndClose(*SendVideoResponse) error
	Recv() (*SendVideoRequest, error)
	grpc.ServerStream
}

type videoMuxSendVideoServer struct {
	grpc.ServerStream
}

func (x *videoMuxSendVideoServer) SendAndClose(m *SendVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoMuxSendVideoServer) Recv() (*SendVideoRequest, error) {
	m := new(SendVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoMux_ReceiveVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoMuxServer).ReceiveVideo(m, &videoMuxReceiveVideoServer{stream})
}

type VideoMux_ReceiveVideoServer interface {
	Send(*ReceiveVideoResponse) error
	grpc.ServerStream
}

type videoMuxReceiveVideoServer struct {
	grpc.ServerStream
}

func (x *videoMuxReceiveVideoServer) Send(m *ReceiveVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoMux_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/ListVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).ListVideos(ctx, req.(*ListVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_ConvertVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).ConvertVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/ConvertVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).ConvertVideo(ctx, req.(*ConvertVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_RenameVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).RenameVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/RenameVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).RenameVideo(ctx, req.(*RenameVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoMux_GetVideoProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoMuxServer).GetVideoProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videomux.VideoMux/GetVideoProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoMuxServer).GetVideoProperties(ctx, req.(*GetVideoPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoMux_ServiceDesc is the grpc.ServiceDesc for VideoMux service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoMux_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videomux.VideoMux",
	HandlerType: (*VideoMuxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _VideoMux_CreateAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _VideoMux_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _VideoMux_Logout_Handler,
		},
		{
			MethodName: "ListVideos",
			Handler:    _VideoMux_ListVideos_Handler,
		},
		{
			MethodName: "ConvertVideo",
			Handler:    _VideoMux_ConvertVideo_Handler,
		},
		{
			MethodName: "RenameVideo",
			Handler:    _VideoMux_RenameVideo_Handler,
		},
		{
			MethodName: "GetVideoProperties",
			Handler:    _VideoMux_GetVideoProperties_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendVideo",
			Handler:       _VideoMux_SendVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveVideo",
			Handler:       _VideoMux_ReceiveVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "videomux.proto",
}
