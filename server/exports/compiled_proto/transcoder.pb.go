// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: transcoder.proto

package compiled_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoCodec int32

const (
	VideoCodec_H264        VideoCodec = 0 // Most common codec, used by iPhones, Android, etc.
	VideoCodec_HEVC        VideoCodec = 1 // Used typically for 4K and Ultra-HD streaming.
	VideoCodec_VP9         VideoCodec = 2 // Most commonly used on the web for streaming services (developed by Google). e.g. YouTube.
	VideoCodec_AV1         VideoCodec = 3 // Used by media content providers such as Netflix, Hulu, etc.
	VideoCodec_COPY_VCODEC VideoCodec = 4 // Copy the existing video codec i.e. no change.
)

// Enum value maps for VideoCodec.
var (
	VideoCodec_name = map[int32]string{
		0: "H264",
		1: "HEVC",
		2: "VP9",
		3: "AV1",
		4: "COPY_VCODEC",
	}
	VideoCodec_value = map[string]int32{
		"H264":        0,
		"HEVC":        1,
		"VP9":         2,
		"AV1":         3,
		"COPY_VCODEC": 4,
	}
)

func (x VideoCodec) Enum() *VideoCodec {
	p := new(VideoCodec)
	*p = x
	return p
}

func (x VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_transcoder_proto_enumTypes[0].Descriptor()
}

func (VideoCodec) Type() protoreflect.EnumType {
	return &file_transcoder_proto_enumTypes[0]
}

func (x VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodec.Descriptor instead.
func (VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{0}
}

type AudioCodec int32

const (
	AudioCodec_AAC         AudioCodec = 0 // Default audio codec for iPhone, Android, Nintendo systems, etc.
	AudioCodec_FLAC        AudioCodec = 1 // Used typically in CDs. Famous for being lossless (high audio quality).
	AudioCodec_AC3         AudioCodec = 2 // Used in blu-ray systems, DVDs, some gaming consoles.
	AudioCodec_COPY_ACODEC AudioCodec = 3 // Copy the existing audio codec i.e. no change.
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AAC",
		1: "FLAC",
		2: "AC3",
		3: "COPY_ACODEC",
	}
	AudioCodec_value = map[string]int32{
		"AAC":         0,
		"FLAC":        1,
		"AC3":         2,
		"COPY_ACODEC": 3,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_transcoder_proto_enumTypes[1].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_transcoder_proto_enumTypes[1]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{1}
}

// Credentials to authorize requests to AWS S3.
type AWSCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region          string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	BucketName      string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	AccessKeyId     string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
}

func (x *AWSCredentials) Reset() {
	*x = AWSCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCredentials) ProtoMessage() {}

func (x *AWSCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCredentials.ProtoReflect.Descriptor instead.
func (*AWSCredentials) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{0}
}

func (x *AWSCredentials) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSCredentials) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *AWSCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AWSCredentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

// Header of the transcoder, sent before any chunks are sent. Contains information
// regarding video metadata, transcoding information, and AWS Credentials.
type TranscoderHeaderInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName         string          `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	AwsCredentials   *AWSCredentials `protobuf:"bytes,2,opt,name=aws_credentials,json=awsCredentials,proto3" json:"aws_credentials,omitempty"`
	OutputVideoCodec *VideoCodec     `protobuf:"varint,3,opt,name=output_video_codec,json=outputVideoCodec,proto3,enum=transcoder.VideoCodec,oneof" json:"output_video_codec,omitempty"`
	OutputAudioCodec *AudioCodec     `protobuf:"varint,4,opt,name=output_audio_codec,json=outputAudioCodec,proto3,enum=transcoder.AudioCodec,oneof" json:"output_audio_codec,omitempty"`
}

func (x *TranscoderHeaderInformation) Reset() {
	*x = TranscoderHeaderInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscoderHeaderInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscoderHeaderInformation) ProtoMessage() {}

func (x *TranscoderHeaderInformation) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscoderHeaderInformation.ProtoReflect.Descriptor instead.
func (*TranscoderHeaderInformation) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{1}
}

func (x *TranscoderHeaderInformation) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TranscoderHeaderInformation) GetAwsCredentials() *AWSCredentials {
	if x != nil {
		return x.AwsCredentials
	}
	return nil
}

func (x *TranscoderHeaderInformation) GetOutputVideoCodec() VideoCodec {
	if x != nil && x.OutputVideoCodec != nil {
		return *x.OutputVideoCodec
	}
	return VideoCodec_H264
}

func (x *TranscoderHeaderInformation) GetOutputAudioCodec() AudioCodec {
	if x != nil && x.OutputAudioCodec != nil {
		return *x.OutputAudioCodec
	}
	return AudioCodec_AAC
}

// A chunk of video containing the bytes of the chunk.
type VideoChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Chunk:
	//
	//	*VideoChunk_Header
	//	*VideoChunk_ChunkData
	Chunk isVideoChunk_Chunk `protobuf_oneof:"chunk"`
}

func (x *VideoChunk) Reset() {
	*x = VideoChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChunk) ProtoMessage() {}

func (x *VideoChunk) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChunk.ProtoReflect.Descriptor instead.
func (*VideoChunk) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{2}
}

func (m *VideoChunk) GetChunk() isVideoChunk_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (x *VideoChunk) GetHeader() *TranscoderHeaderInformation {
	if x, ok := x.GetChunk().(*VideoChunk_Header); ok {
		return x.Header
	}
	return nil
}

func (x *VideoChunk) GetChunkData() []byte {
	if x, ok := x.GetChunk().(*VideoChunk_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isVideoChunk_Chunk interface {
	isVideoChunk_Chunk()
}

type VideoChunk_Header struct {
	Header *TranscoderHeaderInformation `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type VideoChunk_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*VideoChunk_Header) isVideoChunk_Chunk() {}

func (*VideoChunk_ChunkData) isVideoChunk_Chunk() {}

var File_transcoder_proto protoreflect.FileDescriptor

var file_transcoder_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0e,
	0x41, 0x57, 0x53, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x57, 0x53, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x48, 0x01, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x22, 0x79, 0x0a,
	0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x07, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x43, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x32, 0x36, 0x34, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x56, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x50,
	0x39, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x31, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4f, 0x50, 0x59, 0x5f, 0x56, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x10, 0x04, 0x2a, 0x39, 0x0a,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x41, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x43, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x50, 0x59, 0x5f,
	0x41, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x10, 0x03, 0x32, 0x5e, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x18, 0x5a, 0x16, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcoder_proto_rawDescOnce sync.Once
	file_transcoder_proto_rawDescData = file_transcoder_proto_rawDesc
)

func file_transcoder_proto_rawDescGZIP() []byte {
	file_transcoder_proto_rawDescOnce.Do(func() {
		file_transcoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcoder_proto_rawDescData)
	})
	return file_transcoder_proto_rawDescData
}

var file_transcoder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_transcoder_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transcoder_proto_goTypes = []interface{}{
	(VideoCodec)(0),                     // 0: transcoder.VideoCodec
	(AudioCodec)(0),                     // 1: transcoder.AudioCodec
	(*AWSCredentials)(nil),              // 2: transcoder.AWSCredentials
	(*TranscoderHeaderInformation)(nil), // 3: transcoder.TranscoderHeaderInformation
	(*VideoChunk)(nil),                  // 4: transcoder.VideoChunk
	(*emptypb.Empty)(nil),               // 5: google.protobuf.Empty
}
var file_transcoder_proto_depIdxs = []int32{
	2, // 0: transcoder.TranscoderHeaderInformation.aws_credentials:type_name -> transcoder.AWSCredentials
	0, // 1: transcoder.TranscoderHeaderInformation.output_video_codec:type_name -> transcoder.VideoCodec
	1, // 2: transcoder.TranscoderHeaderInformation.output_audio_codec:type_name -> transcoder.AudioCodec
	3, // 3: transcoder.VideoChunk.header:type_name -> transcoder.TranscoderHeaderInformation
	4, // 4: transcoder.VideoTranscoderService.SendVideoChunk:input_type -> transcoder.VideoChunk
	5, // 5: transcoder.VideoTranscoderService.SendVideoChunk:output_type -> google.protobuf.Empty
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_transcoder_proto_init() }
func file_transcoder_proto_init() {
	if File_transcoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transcoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscoderHeaderInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcoder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transcoder_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_transcoder_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VideoChunk_Header)(nil),
		(*VideoChunk_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcoder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcoder_proto_goTypes,
		DependencyIndexes: file_transcoder_proto_depIdxs,
		EnumInfos:         file_transcoder_proto_enumTypes,
		MessageInfos:      file_transcoder_proto_msgTypes,
	}.Build()
	File_transcoder_proto = out.File
	file_transcoder_proto_rawDesc = nil
	file_transcoder_proto_goTypes = nil
	file_transcoder_proto_depIdxs = nil
}
