// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: transcoder.proto

package compiled_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoTranscoderServiceClient is the client API for VideoTranscoderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoTranscoderServiceClient interface {
	// Sends a chunk of video to the server.
	// The first call to SendVideoChunk should _ALWAYS_ send the header information by populating the `header` field.
	// Each subsequent call must send the video chunk bytes by populating the `chunk_data` field.
	SendVideoChunk(ctx context.Context, opts ...grpc.CallOption) (VideoTranscoderService_SendVideoChunkClient, error)
}

type videoTranscoderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoTranscoderServiceClient(cc grpc.ClientConnInterface) VideoTranscoderServiceClient {
	return &videoTranscoderServiceClient{cc}
}

func (c *videoTranscoderServiceClient) SendVideoChunk(ctx context.Context, opts ...grpc.CallOption) (VideoTranscoderService_SendVideoChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoTranscoderService_ServiceDesc.Streams[0], "/transcoder.VideoTranscoderService/SendVideoChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoTranscoderServiceSendVideoChunkClient{stream}
	return x, nil
}

type VideoTranscoderService_SendVideoChunkClient interface {
	Send(*VideoChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type videoTranscoderServiceSendVideoChunkClient struct {
	grpc.ClientStream
}

func (x *videoTranscoderServiceSendVideoChunkClient) Send(m *VideoChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoTranscoderServiceSendVideoChunkClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoTranscoderServiceServer is the server API for VideoTranscoderService service.
// All implementations must embed UnimplementedVideoTranscoderServiceServer
// for forward compatibility
type VideoTranscoderServiceServer interface {
	// Sends a chunk of video to the server.
	// The first call to SendVideoChunk should _ALWAYS_ send the header information by populating the `header` field.
	// Each subsequent call must send the video chunk bytes by populating the `chunk_data` field.
	SendVideoChunk(VideoTranscoderService_SendVideoChunkServer) error
	mustEmbedUnimplementedVideoTranscoderServiceServer()
}

// UnimplementedVideoTranscoderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoTranscoderServiceServer struct {
}

func (UnimplementedVideoTranscoderServiceServer) SendVideoChunk(VideoTranscoderService_SendVideoChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method SendVideoChunk not implemented")
}
func (UnimplementedVideoTranscoderServiceServer) mustEmbedUnimplementedVideoTranscoderServiceServer() {
}

// UnsafeVideoTranscoderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoTranscoderServiceServer will
// result in compilation errors.
type UnsafeVideoTranscoderServiceServer interface {
	mustEmbedUnimplementedVideoTranscoderServiceServer()
}

func RegisterVideoTranscoderServiceServer(s grpc.ServiceRegistrar, srv VideoTranscoderServiceServer) {
	s.RegisterService(&VideoTranscoderService_ServiceDesc, srv)
}

func _VideoTranscoderService_SendVideoChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoTranscoderServiceServer).SendVideoChunk(&videoTranscoderServiceSendVideoChunkServer{stream})
}

type VideoTranscoderService_SendVideoChunkServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*VideoChunk, error)
	grpc.ServerStream
}

type videoTranscoderServiceSendVideoChunkServer struct {
	grpc.ServerStream
}

func (x *videoTranscoderServiceSendVideoChunkServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoTranscoderServiceSendVideoChunkServer) Recv() (*VideoChunk, error) {
	m := new(VideoChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoTranscoderService_ServiceDesc is the grpc.ServiceDesc for VideoTranscoderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoTranscoderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcoder.VideoTranscoderService",
	HandlerType: (*VideoTranscoderServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendVideoChunk",
			Handler:       _VideoTranscoderService_SendVideoChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transcoder.proto",
}
